import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# ===================
# CONFIGURATION
# ===================
st.set_page_config(page_title="Simulation Photovolta√Øque ‚òÄÔ∏è", layout="centered")

# ===================
# Titre
# ===================
st.title("‚òÄÔ∏è Simulation d‚Äôun Syst√®me Photovolta√Øque R√©sidentiel")

st.markdown("Simulez la production, le rendement et les co√ªts selon vos choix de panneaux, m√©t√©o et nombre de modules.")

# ===================
# Entr√©es utilisateur
# ===================
panneau = st.selectbox(
    "üß± Type de panneau solaire",
    ["Monocristallin", "Polycristallin", "Amorphe", "H√©t√©rojonction", "Bifacial"]
)

meteo = st.radio("üå§Ô∏è Conditions m√©t√©orologiques", ["Ensoleill√©", "Nuageux", "Pluvieux"])

nb_panneaux = st.slider("üî¢ Nombre de panneaux install√©s", 0, 25, 20)

# ===================
# Donn√©es de base
# ===================
surface_par_module = 1.7  # m¬≤
surface_totale = surface_par_module * nb_panneaux
irradiation_marseille = 1824  # kWh/m¬≤/an

facteur_meteo = {
    "Ensoleill√©": 1.0,
    "Nuageux": 0.75,
    "Pluvieux": 0.55
}[meteo]

data = {
    "Monocristallin": {"rendement": 20.0, "prix": 1.20},
    "Polycristallin": {"rendement": 17.5, "prix": 1.00},
    "Amorphe": {"rendement": 10.0, "prix": 0.80},
    "H√©t√©rojonction": {"rendement": 21.5, "prix": 1.50},
    "Bifacial": {"rendement": 19.5, "prix": 1.40}
}

# ===================
# Calculs
# ===================
rendement = data[panneau]["rendement"]
prix_watt = data[panneau]["prix"]

puissance_kWp = (rendement / 100) * surface_totale
production = puissance_kWp * irradiation_marseille * facteur_meteo
efficacite = production / (surface_totale or 1)
cout_total = puissance_kWp * 1000 * prix_watt

# Hypoth√®se de conso
conso_batiment = 8260  # kWh/an
autoconso = min(conso_batiment, production) * 0.9
injecte = max(0, production - autoconso)
reprise = max(0, conso_batiment - autoconso)

# ===================
# R√©sultats
# ===================
st.subheader("üîé R√©sultats de simulation")

col1, col2 = st.columns(2)
col1.metric("Production estim√©e", f"{production:.0f} kWh/an")
col2.metric("Puissance install√©e", f"{puissance_kWp:.2f} kWc")

col1, col2 = st.columns(2)
col1.metric("Efficacit√©", f"{efficacite:.1f} kWh/m¬≤/an")
col2.metric("Co√ªt total", f"{cout_total:,.0f} ‚Ç¨")

# ===================
# Graph 1 : R√©partition de l‚Äô√©nergie
# ===================
st.subheader("‚ö° R√©partition √©nerg√©tique")

fig1, ax1 = plt.subplots()
labels = ["Autoconsomm√©e", "Inject√©e au r√©seau", "Reprise r√©seau"]
values = [autoconso, injecte, reprise]
colors = ["green", "orange", "red"]

ax1.bar(labels, values, color=colors)
ax1.set_ylabel("√ânergie (kWh)")
ax1.set_title("R√©partition annuelle de l'√©nergie")
ax1.grid(axis='y')
st.pyplot(fig1)

# ===================
# Graph 2 : Comparaison (optionnel)
# ===================
st.subheader("üìä Comparaison par type de panneau")

df = pd.DataFrame({
    'Type': list(data.keys()),
    'Rendement (%)': [v["rendement"] for v in data.values()],
    'kWp installable': [(v["rendement"] / 100) * surface_totale for v in data.values()],
    'Co√ªt total (‚Ç¨)': [(v["rendement"] / 100) * surface_totale * 1000 * v["prix"] for v in data.values()],
})

df["Production (kWh/an)"] = df["kWp installable"] * irradiation_marseille * facteur_meteo
df["Efficacit√© (kWh/m¬≤/an)"] = df["Production (kWh/an)"] / (surface_totale or 1)

tab1, tab2, tab3 = st.tabs(["Production", "Efficacit√©", "Co√ªt"])

with tab1:
    fig, ax = plt.subplots()
    ax.bar(df["Type"], df["Production (kWh/an)"], color="seagreen")
    ax.set_title("Production annuelle")
    ax.set_ylabel("kWh/an")
    ax.grid(axis='y')
    st.pyplot(fig)

with tab2:
    fig, ax = plt.subplots()
    ax.bar(df["Type"], df["Efficacit√© (kWh/m¬≤/an)"], color="darkorange")
    ax.set_title("Efficacit√© √©nerg√©tique")
    ax.set_ylabel("kWh/m¬≤/an")
    ax.grid(axis='y')
    st.pyplot(fig)

with tab3:
    fig, ax = plt.subplots()
    ax.bar(df["Type"], df["Co√ªt total (‚Ç¨)"], color="steelblue")
    ax.set_title("Co√ªt estim√©")
    ax.set_ylabel("‚Ç¨")
    ax.grid(axis='y')
    st.pyplot(fig)

# ===================
# Footer
# ===================
st.markdown("---")
st.caption("üìç Simulation bas√©e sur les donn√©es r√©elles de Marseille et les r√©sultats PVsyst du projet S8.")

